@page "/game/{gameName}"
@using ChroniclesOfDarknessDiceRoller.Client.Services
@using ChroniclesOfDarknessDiceRoller.Shared
@using ChroniclesOfDarknessDiceRoller.Shared.Constants
@using ChroniclesOfDarknessDiceRoller.Client.Components;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@implements IAsyncDisposable

<div class="layout">
    <Card Title="@GameName">
        <form @onsubmit=RollDiceAsync>
            <div class="form-group">
                <label for="player-name">Player</label>
                <input id="player-name" @bind="player" type="text" required class="input" />
            </div>
            <div class="form-group">
                <label for="dice-amount">Dice amount</label>
                <input id="dice-amount" @bind="amount" type="number" max="30" min="1" class="input" />
            </div>
            <div class="form-group">
                @foreach (var choice in RerollTypeChoices)
                {
                    <div class="form-check">
                        <label id=@($"radio-{choice.Type}") class="form-label"> @choice.Text.ToString() </label>
                        <input id=@($"radio-{choice.Type}") name="rerolltype-radio" type="radio"
                           value="@choice"
                           checked="@(SelectedRerollType == choice.Type)"
                           @onchange="@(() => { SelectedRerollType = choice.Type; })" />
                    </div>
                }
            </div>
            <button class="button" type="submit">Roll</button>
            <button class="button" type="button" @onclick="RollChanceDiceAsync">Chance Die</button>
        </form>
    </Card>

    @if (rollResults.Any())
    {
        <Card>
            @foreach (var roll in Enumerable.Reverse(rollResults))
            {
                <div class="roll-result">
                    <RollResultCard RollResult="roll" />
                </div>
            }
        </Card>
    }

</div>

@code {
    [Parameter]
    public string GameName { get; set; }

    private HubConnection? hubConnection;
    private List<RollResult> rollResults = new List<RollResult>();
    private string? player;
    private int? amount;
    private RerollType SelectedRerollType = RerollType.TenAgain;

    private List<RerollTypeChoice> RerollTypeChoices = new()
        {
            new RerollTypeChoice(RerollType.TenAgain, "Ten again."),
            new RerollTypeChoice(RerollType.NineAgain, "Nine again."),
            new RerollTypeChoice(RerollType.EightAgain, "Eight again."),
        };

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/api/dicerollerhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<RollResult>(SignalRMethods.ReceiveDiceRoll, (message) =>
        {
            rollResults.Add(message);
            StateHasChanged();
        });

        hubConnection.On<List<RollResult>>(SignalRMethods.ReceiveHistory, (message) =>
        {
            rollResults = message;
            StateHasChanged();
        });

        hubConnection.On<string>(SignalRMethods.ReceiveError, (message) =>
        {
            ToastService.ShowToast(message, ToastLevel.Error);
            StateHasChanged();
        });

        hubConnection.Reconnected += _ => JoinGameAsync();

        await hubConnection.StartAsync();
        await JoinGameAsync();

    }

    private async Task JoinGameAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinGame", GameName);
        }
    }

    private async Task RollDiceAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RollDice", GameName, player, amount, SelectedRerollType);
        }
    }

    private async Task RollChanceDiceAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RollDice", GameName, player, 1, RerollType.NoTenAgain);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private string RollToString(RollResult rollResult)
    {
        return string.Join(", ",
            rollResult.Rolls.Select(t =>
            {
                if (t.RerollsResults != null && t.RerollsResults.Any())
                {
                    return $"{t.Result}({string.Join(", ", t.RerollsResults) })";
                }
                return t.Result.ToString();
            })
        );
    }

    private record RerollTypeChoice(RerollType Type, string Text);
}
